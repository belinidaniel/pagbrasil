<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>Calls an action that adds the lead that triggered the flow to the Cadence from GetCadence.</description>
        <name>AddLeadToCadence</name>
        <label>Add Lead to Cadence</label>
        <locationX>50</locationX>
        <locationY>1847</locationY>
        <actionName>assignTargetToSalesCadenceNotFound</actionName>
        <actionType>assignTargetToSalesCadence</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>salesCadenceNameOrId</name>
            <value>
                <elementReference>GetCadence.Id__NotFound</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that removes the opted-out lead from all cadences and sets the completion reason to ManuallyRemoved.</description>
        <name>RemoveLead</name>
        <label>Remove Lead</label>
        <locationX>512</locationX>
        <locationY>575</locationY>
        <actionName>removeTargetFromSalesCadenceNotFound</actionName>
        <actionType>removeTargetFromSalesCadence</actionType>
        <connector>
            <targetReference>GetPermissionSetAssignment</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>targetId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>completionReasonCode</name>
            <value>
                <stringValue>ManuallyRemoved</stringValue>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <apiVersion>57.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <assignments>
        <description>Configura Ritmo Inbound</description>
        <name>InboundCadence</name>
        <label>Inbound Cadence</label>
        <locationX>116</locationX>
        <locationY>1151</locationY>
        <assignmentItems>
            <assignToReference>VarCadenceId</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>77C8W000000GtjxUAC</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>GetCadence</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Configura para o Ritmo Prospecção Outbound</description>
        <name>OutboundCadence</name>
        <label>Outbound Cadence</label>
        <locationX>380</locationX>
        <locationY>1151</locationY>
        <assignmentItems>
            <assignToReference>VarCadenceId</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>77C8W000000Gtk2UAC</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>GetCadence</targetReference>
        </connector>
    </assignments>
    <constants>
        <description>Stores the cadence ID used to retrieve the cadence. Update this value with a valid cadence ID from your org.</description>
        <name>CadenceId</name>
        <dataType>String</dataType>
        <value>
            <stringValue>77C790000008OVeEAM</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the primary sales engagement permission set ID used to retrieve the permission set assignment. Update this value with a valid permission set ID from your org.</description>
        <name>PrimarySalesEngagementPermissionSetId</name>
        <dataType>String</dataType>
        <value>
            <stringValue>0PS8W000000KkjnWAC</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the secondary sales engagement permission set ID used to retrieve the permission set assignment. Update this value with a valid permission set ID from your org. If you&apos;re checking for only one permission set, delete this constant.</description>
        <name>SecondarySalesEnagementPermissionSetId</name>
        <dataType>String</dataType>
        <value>
            <stringValue>0PS8W000000KkjlWAC</stringValue>
        </value>
    </constants>
    <decisions>
        <description>Determines if a record is in User Record Access in GetUserRecordAccess.</description>
        <name>DoesUserHaveAccess</name>
        <label>Does User Have Access?</label>
        <locationX>182</locationX>
        <locationY>1727</locationY>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasRecordAccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>UserRecordAccessId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AddLeadToCadence</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the owner of the lead that triggered the flow has an associated record in PermissionSet Assignment from from GetPermissionSetAssignment.</description>
        <name>DoesUserHavePermission</name>
        <label>Does User Have Permission?</label>
        <locationX>644</locationX>
        <locationY>911</locationY>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasPermission</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetPermissionSetAssignment.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>OutboundInbound</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether an ID is in Cadence from GetCadence.</description>
        <name>FoundMatchingCadence</name>
        <label>Found Matching Cadence?</label>
        <locationX>380</locationX>
        <locationY>1487</locationY>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>CadenceFound</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetCadence.Id__NotFound</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_User_Cadence_Access</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the ID of the GetActiveCadenceTrackerRecord exists.</description>
        <name>HasCadenceTrackerId</name>
        <label>Has Cadence Tracker ID?</label>
        <locationX>644</locationX>
        <locationY>455</locationY>
        <defaultConnector>
            <targetReference>GetPermissionSetAssignment</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>CadenceTrackerIdExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetActiveCadenceTrackerRecord.Id__NotFound</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>RemoveLead</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Verifica se o Lead tem Qualificador Inbound ou Outbound.</description>
        <name>OutboundInbound</name>
        <label>Outbound ou Inbound</label>
        <locationX>380</locationX>
        <locationY>1031</locationY>
        <defaultConnectorLabel>Outros</defaultConnectorLabel>
        <rules>
            <name>Inbound</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Qualificador__c</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <stringValue>Inbound</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>InboundCadence</targetReference>
            </connector>
            <label>Inbound</label>
        </rules>
        <rules>
            <name>Outbound</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Qualificador__c</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <stringValue>Outbound</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>OutboundCadence</targetReference>
            </connector>
            <label>Outbound</label>
        </rules>
    </decisions>
    <description>Adiciona o lead para os Ritmos &quot;Prospection Inbound&quot; ou &quot;Prospection Outbound&quot;, conforme o caso, quando passa para o estágio &quot;Prospection&quot;.</description>
    <environments>Default</environments>
    <interviewLabel>Lead para Prospecção {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Lead para Prospection</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <description>Gets the user record access record with a UserId matching the OwnerId of the triggering record, with a RecordId that matches the ActionCadenceId of Cadence from GetCadenceId; and with HasReadAccess set to True. Stores the RecordId of the returned record in CadenceAccessRecordId.</description>
        <name>Get_User_Cadence_Access</name>
        <label>Get User Cadence Access</label>
        <locationX>182</locationX>
        <locationY>1607</locationY>
        <assignNullValuesIfNoRecordsFound>true</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>DoesUserHaveAccess</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>UserId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.OwnerId</elementReference>
            </value>
        </filters>
        <filters>
            <field>RecordId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetCadence.Id__NotFound</elementReference>
            </value>
        </filters>
        <filters>
            <field>HasReadAccess</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <object>UserRecordAccess</object>
        <outputAssignments>
            <assignToReference>UserRecordAccessId</assignToReference>
            <field>RecordId</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>Gets a cadence tracker record with a Target ID matching the Lead ID of the triggering record and with a State not equal to Complete or Error. Stores the ID of the returned record in the GetActiveCadenceTrackerRecord record variable.</description>
        <name>GetActiveCadenceTrackerRecord</name>
        <label>Get Active Cadence Tracker Record</label>
        <locationX>644</locationX>
        <locationY>335</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HasCadenceTrackerId</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>TargetId__NotFound</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>State__NotFound</field>
            <operator>NotEqualTo</operator>
            <value>
                <stringValue>Complete</stringValue>
            </value>
        </filters>
        <filters>
            <field>State__NotFound</field>
            <operator>NotEqualTo</operator>
            <value>
                <stringValue>Error</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ActionCadenceTracker__NotFound</object>
        <queriedFields>Id__NotFound</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets the cadence record with an ID matching the specified cadence ID. Stores the ID in the Cadence from GetCadence record variable.</description>
        <name>GetCadence</name>
        <label>Get Cadence</label>
        <locationX>380</locationX>
        <locationY>1367</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>FoundMatchingCadence</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id__NotFound</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>VarCadenceId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ActionCadence__NotFound</object>
        <queriedFields>Id__NotFound</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets an active permission set assignment record with an ID of the assignee matching the ID of the owner of the lead that triggered the flow, and a PermissionSetId matching one of the specified permission set IDs. Stores the ID in the Permission Set Assignment from  GetPermissionSetAssignment record variable.


To check for only one permission set ID, delete the second PermissionSetId condition and delete it from the Condition Logic. To check for additional PermissionSetIds, add conditions to the element and update the Condition Logic so that the new PermissionSetId is part of the list of permission set IDs to check.</description>
        <name>GetPermissionSetAssignment</name>
        <label>Get Permission Set Assignment</label>
        <locationX>644</locationX>
        <locationY>791</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>DoesUserHavePermission</targetReference>
        </connector>
        <filterLogic>1 AND 2 AND (3 OR 4)</filterLogic>
        <filters>
            <field>AssigneeId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.OwnerId</elementReference>
            </value>
        </filters>
        <filters>
            <field>IsActive</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>PermissionSetId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>PrimarySalesEngagementPermissionSetId</elementReference>
            </value>
        </filters>
        <filters>
            <field>PermissionSetId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>SecondarySalesEnagementPermissionSetId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>PermissionSetAssignment</object>
        <queriedFields>Id</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>518</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>GetActiveCadenceTrackerRecord</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Status</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Prospection</stringValue>
            </value>
        </filters>
        <object>Lead</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <variables>
        <description>Stores the ID of the user record access record from GetUserRecordAccess.</description>
        <name>UserRecordAccessId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Variável para ID do Ritmo (CadenceId)</description>
        <name>VarCadenceId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
